/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Example } from "./Example";
import { ExampleCountArgs } from "./ExampleCountArgs";
import { ExampleFindManyArgs } from "./ExampleFindManyArgs";
import { ExampleFindUniqueArgs } from "./ExampleFindUniqueArgs";
import { DeleteExampleArgs } from "./DeleteExampleArgs";
import { ExampleService } from "../example.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Example)
export class ExampleResolverBase {
  constructor(
    protected readonly service: ExampleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Example",
    action: "read",
    possession: "any",
  })
  async _examplesMeta(
    @graphql.Args() args: ExampleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Example])
  @nestAccessControl.UseRoles({
    resource: "Example",
    action: "read",
    possession: "any",
  })
  async examples(
    @graphql.Args() args: ExampleFindManyArgs
  ): Promise<Example[]> {
    return this.service.examples(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Example, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Example",
    action: "read",
    possession: "own",
  })
  async example(
    @graphql.Args() args: ExampleFindUniqueArgs
  ): Promise<Example | null> {
    const result = await this.service.example(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Example)
  @nestAccessControl.UseRoles({
    resource: "Example",
    action: "delete",
    possession: "any",
  })
  async deleteExample(
    @graphql.Args() args: DeleteExampleArgs
  ): Promise<Example | null> {
    try {
      return await this.service.deleteExample(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
