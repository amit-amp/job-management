/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApiRequestService } from "../apiRequest.service";
import { ApiRequestCreateInput } from "./ApiRequestCreateInput";
import { ApiRequest } from "./ApiRequest";
import { ApiRequestFindManyArgs } from "./ApiRequestFindManyArgs";
import { ApiRequestWhereUniqueInput } from "./ApiRequestWhereUniqueInput";
import { ApiRequestUpdateInput } from "./ApiRequestUpdateInput";

export class ApiRequestControllerBase {
  constructor(protected readonly service: ApiRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApiRequest })
  async createApiRequest(
    @common.Body() data: ApiRequestCreateInput
  ): Promise<ApiRequest> {
    return await this.service.createApiRequest({
      data: {
        ...data,

        project: {
          connect: data.project,
        },
      },
      select: {
        id: true,
        createdAt: true,
        type: true,
        durationInMs: true,
        apiVersion: true,

        project: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApiRequest] })
  @ApiNestedQuery(ApiRequestFindManyArgs)
  async apiRequests(@common.Req() request: Request): Promise<ApiRequest[]> {
    const args = plainToClass(ApiRequestFindManyArgs, request.query);
    return this.service.apiRequests({
      ...args,
      select: {
        id: true,
        createdAt: true,
        type: true,
        durationInMs: true,
        apiVersion: true,

        project: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApiRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async apiRequest(
    @common.Param() params: ApiRequestWhereUniqueInput
  ): Promise<ApiRequest | null> {
    const result = await this.service.apiRequest({
      where: params,
      select: {
        id: true,
        createdAt: true,
        type: true,
        durationInMs: true,
        apiVersion: true,

        project: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApiRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApiRequest(
    @common.Param() params: ApiRequestWhereUniqueInput,
    @common.Body() data: ApiRequestUpdateInput
  ): Promise<ApiRequest | null> {
    try {
      return await this.service.updateApiRequest({
        where: params,
        data: {
          ...data,

          project: {
            connect: data.project,
          },
        },
        select: {
          id: true,
          createdAt: true,
          type: true,
          durationInMs: true,
          apiVersion: true,

          project: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApiRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApiRequest(
    @common.Param() params: ApiRequestWhereUniqueInput
  ): Promise<ApiRequest | null> {
    try {
      return await this.service.deleteApiRequest({
        where: params,
        select: {
          id: true,
          createdAt: true,
          type: true,
          durationInMs: true,
          apiVersion: true,

          project: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
