/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FeatureFlagService } from "../featureFlag.service";
import { FeatureFlagCreateInput } from "./FeatureFlagCreateInput";
import { FeatureFlag } from "./FeatureFlag";
import { FeatureFlagFindManyArgs } from "./FeatureFlagFindManyArgs";
import { FeatureFlagWhereUniqueInput } from "./FeatureFlagWhereUniqueInput";
import { FeatureFlagUpdateInput } from "./FeatureFlagUpdateInput";
import { FeatureFlagValueFindManyArgs } from "../../featureFlagValue/base/FeatureFlagValueFindManyArgs";
import { FeatureFlagValue } from "../../featureFlagValue/base/FeatureFlagValue";
import { FeatureFlagValueWhereUniqueInput } from "../../featureFlagValue/base/FeatureFlagValueWhereUniqueInput";

export class FeatureFlagControllerBase {
  constructor(protected readonly service: FeatureFlagService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FeatureFlag })
  async createFeatureFlag(
    @common.Body() data: FeatureFlagCreateInput
  ): Promise<FeatureFlag> {
    return await this.service.createFeatureFlag({
      data: {
        ...data,

        project: {
          connect: data.project,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        description: true,
        type: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FeatureFlag] })
  @ApiNestedQuery(FeatureFlagFindManyArgs)
  async featureFlags(@common.Req() request: Request): Promise<FeatureFlag[]> {
    const args = plainToClass(FeatureFlagFindManyArgs, request.query);
    return this.service.featureFlags({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        description: true,
        type: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async featureFlag(
    @common.Param() params: FeatureFlagWhereUniqueInput
  ): Promise<FeatureFlag | null> {
    const result = await this.service.featureFlag({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        description: true,
        type: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFeatureFlag(
    @common.Param() params: FeatureFlagWhereUniqueInput,
    @common.Body() data: FeatureFlagUpdateInput
  ): Promise<FeatureFlag | null> {
    try {
      return await this.service.updateFeatureFlag({
        where: params,
        data: {
          ...data,

          project: {
            connect: data.project,
          },
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          project: {
            select: {
              id: true,
            },
          },

          description: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFeatureFlag(
    @common.Param() params: FeatureFlagWhereUniqueInput
  ): Promise<FeatureFlag | null> {
    try {
      return await this.service.deleteFeatureFlag({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          project: {
            select: {
              id: true,
            },
          },

          description: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/values")
  @ApiNestedQuery(FeatureFlagValueFindManyArgs)
  async findValues(
    @common.Req() request: Request,
    @common.Param() params: FeatureFlagWhereUniqueInput
  ): Promise<FeatureFlagValue[]> {
    const query = plainToClass(FeatureFlagValueFindManyArgs, request.query);
    const results = await this.service.findValues(params.id, {
      ...query,
      select: {
        id: true,

        flag: {
          select: {
            id: true,
          },
        },

        value: true,
        environmentId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/values")
  async connectValues(
    @common.Param() params: FeatureFlagWhereUniqueInput,
    @common.Body() body: FeatureFlagValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      values: {
        connect: body,
      },
    };
    await this.service.updateFeatureFlag({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/values")
  async updateValues(
    @common.Param() params: FeatureFlagWhereUniqueInput,
    @common.Body() body: FeatureFlagValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      values: {
        set: body,
      },
    };
    await this.service.updateFeatureFlag({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/values")
  async disconnectValues(
    @common.Param() params: FeatureFlagWhereUniqueInput,
    @common.Body() body: FeatureFlagValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      values: {
        disconnect: body,
      },
    };
    await this.service.updateFeatureFlag({
      where: params,
      data,
      select: { id: true },
    });
  }
}
