/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FeatureFlag, FeatureFlagValue, Project } from "@prisma/client";

export class FeatureFlagServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FeatureFlagCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagCountArgs>
  ): Promise<number> {
    return this.prisma.featureFlag.count(args);
  }

  async featureFlags<T extends Prisma.FeatureFlagFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagFindManyArgs>
  ): Promise<FeatureFlag[]> {
    return this.prisma.featureFlag.findMany(args);
  }
  async featureFlag<T extends Prisma.FeatureFlagFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagFindUniqueArgs>
  ): Promise<FeatureFlag | null> {
    return this.prisma.featureFlag.findUnique(args);
  }
  async createFeatureFlag<T extends Prisma.FeatureFlagCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagCreateArgs>
  ): Promise<FeatureFlag> {
    return this.prisma.featureFlag.create<T>(args);
  }
  async updateFeatureFlag<T extends Prisma.FeatureFlagUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagUpdateArgs>
  ): Promise<FeatureFlag> {
    return this.prisma.featureFlag.update<T>(args);
  }
  async deleteFeatureFlag<T extends Prisma.FeatureFlagDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagDeleteArgs>
  ): Promise<FeatureFlag> {
    return this.prisma.featureFlag.delete(args);
  }

  async findValues(
    parentId: string,
    args: Prisma.FeatureFlagValueFindManyArgs
  ): Promise<FeatureFlagValue[]> {
    return this.prisma.featureFlag
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .values(args);
  }

  async getProject(parentId: string): Promise<Project | null> {
    return this.prisma.featureFlag
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
