/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FeatureFlagHistoryService } from "../featureFlagHistory.service";
import { FeatureFlagHistoryCreateInput } from "./FeatureFlagHistoryCreateInput";
import { FeatureFlagHistory } from "./FeatureFlagHistory";
import { FeatureFlagHistoryFindManyArgs } from "./FeatureFlagHistoryFindManyArgs";
import { FeatureFlagHistoryWhereUniqueInput } from "./FeatureFlagHistoryWhereUniqueInput";
import { FeatureFlagHistoryUpdateInput } from "./FeatureFlagHistoryUpdateInput";

export class FeatureFlagHistoryControllerBase {
  constructor(protected readonly service: FeatureFlagHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FeatureFlagHistory })
  async createFeatureFlagHistory(
    @common.Body() data: FeatureFlagHistoryCreateInput
  ): Promise<FeatureFlagHistory> {
    return await this.service.createFeatureFlagHistory({
      data: {
        ...data,

        user: {
          connect: data.user,
        },

        flagValue: {
          connect: data.flagValue,
        },
      },
      select: {
        id: true,
        createdAt: true,
        oldValue: true,
        newValue: true,

        user: {
          select: {
            id: true,
          },
        },

        flagValue: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FeatureFlagHistory] })
  @ApiNestedQuery(FeatureFlagHistoryFindManyArgs)
  async featureFlagHistories(
    @common.Req() request: Request
  ): Promise<FeatureFlagHistory[]> {
    const args = plainToClass(FeatureFlagHistoryFindManyArgs, request.query);
    return this.service.featureFlagHistories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        oldValue: true,
        newValue: true,

        user: {
          select: {
            id: true,
          },
        },

        flagValue: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlagHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async featureFlagHistory(
    @common.Param() params: FeatureFlagHistoryWhereUniqueInput
  ): Promise<FeatureFlagHistory | null> {
    const result = await this.service.featureFlagHistory({
      where: params,
      select: {
        id: true,
        createdAt: true,
        oldValue: true,
        newValue: true,

        user: {
          select: {
            id: true,
          },
        },

        flagValue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlagHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFeatureFlagHistory(
    @common.Param() params: FeatureFlagHistoryWhereUniqueInput,
    @common.Body() data: FeatureFlagHistoryUpdateInput
  ): Promise<FeatureFlagHistory | null> {
    try {
      return await this.service.updateFeatureFlagHistory({
        where: params,
        data: {
          ...data,

          user: {
            connect: data.user,
          },

          flagValue: {
            connect: data.flagValue,
          },
        },
        select: {
          id: true,
          createdAt: true,
          oldValue: true,
          newValue: true,

          user: {
            select: {
              id: true,
            },
          },

          flagValue: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlagHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFeatureFlagHistory(
    @common.Param() params: FeatureFlagHistoryWhereUniqueInput
  ): Promise<FeatureFlagHistory | null> {
    try {
      return await this.service.deleteFeatureFlagHistory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          oldValue: true,
          newValue: true,

          user: {
            select: {
              id: true,
            },
          },

          flagValue: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
