/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FeatureFlagHistory } from "./FeatureFlagHistory";
import { FeatureFlagHistoryCountArgs } from "./FeatureFlagHistoryCountArgs";
import { FeatureFlagHistoryFindManyArgs } from "./FeatureFlagHistoryFindManyArgs";
import { FeatureFlagHistoryFindUniqueArgs } from "./FeatureFlagHistoryFindUniqueArgs";
import { CreateFeatureFlagHistoryArgs } from "./CreateFeatureFlagHistoryArgs";
import { UpdateFeatureFlagHistoryArgs } from "./UpdateFeatureFlagHistoryArgs";
import { DeleteFeatureFlagHistoryArgs } from "./DeleteFeatureFlagHistoryArgs";
import { User } from "../../user/base/User";
import { FeatureFlagValue } from "../../featureFlagValue/base/FeatureFlagValue";
import { FeatureFlagHistoryService } from "../featureFlagHistory.service";
@graphql.Resolver(() => FeatureFlagHistory)
export class FeatureFlagHistoryResolverBase {
  constructor(protected readonly service: FeatureFlagHistoryService) {}

  async _featureFlagHistoriesMeta(
    @graphql.Args() args: FeatureFlagHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FeatureFlagHistory])
  async featureFlagHistories(
    @graphql.Args() args: FeatureFlagHistoryFindManyArgs
  ): Promise<FeatureFlagHistory[]> {
    return this.service.featureFlagHistories(args);
  }

  @graphql.Query(() => FeatureFlagHistory, { nullable: true })
  async featureFlagHistory(
    @graphql.Args() args: FeatureFlagHistoryFindUniqueArgs
  ): Promise<FeatureFlagHistory | null> {
    const result = await this.service.featureFlagHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FeatureFlagHistory)
  async createFeatureFlagHistory(
    @graphql.Args() args: CreateFeatureFlagHistoryArgs
  ): Promise<FeatureFlagHistory> {
    return await this.service.createFeatureFlagHistory({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },

        flagValue: {
          connect: args.data.flagValue,
        },
      },
    });
  }

  @graphql.Mutation(() => FeatureFlagHistory)
  async updateFeatureFlagHistory(
    @graphql.Args() args: UpdateFeatureFlagHistoryArgs
  ): Promise<FeatureFlagHistory | null> {
    try {
      return await this.service.updateFeatureFlagHistory({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },

          flagValue: {
            connect: args.data.flagValue,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeatureFlagHistory)
  async deleteFeatureFlagHistory(
    @graphql.Args() args: DeleteFeatureFlagHistoryArgs
  ): Promise<FeatureFlagHistory | null> {
    try {
      return await this.service.deleteFeatureFlagHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: FeatureFlagHistory
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => FeatureFlagValue, {
    nullable: true,
    name: "flagValue",
  })
  async getFlagValue(
    @graphql.Parent() parent: FeatureFlagHistory
  ): Promise<FeatureFlagValue | null> {
    const result = await this.service.getFlagValue(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
