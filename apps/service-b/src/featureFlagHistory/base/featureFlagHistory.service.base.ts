/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FeatureFlagHistory,
  User,
  FeatureFlagValue,
} from "@prisma/client";

export class FeatureFlagHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FeatureFlagHistoryCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagHistoryCountArgs>
  ): Promise<number> {
    return this.prisma.featureFlagHistory.count(args);
  }

  async featureFlagHistories<T extends Prisma.FeatureFlagHistoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagHistoryFindManyArgs>
  ): Promise<FeatureFlagHistory[]> {
    return this.prisma.featureFlagHistory.findMany(args);
  }
  async featureFlagHistory<T extends Prisma.FeatureFlagHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagHistoryFindUniqueArgs>
  ): Promise<FeatureFlagHistory | null> {
    return this.prisma.featureFlagHistory.findUnique(args);
  }
  async createFeatureFlagHistory<T extends Prisma.FeatureFlagHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagHistoryCreateArgs>
  ): Promise<FeatureFlagHistory> {
    return this.prisma.featureFlagHistory.create<T>(args);
  }
  async updateFeatureFlagHistory<T extends Prisma.FeatureFlagHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagHistoryUpdateArgs>
  ): Promise<FeatureFlagHistory> {
    return this.prisma.featureFlagHistory.update<T>(args);
  }
  async deleteFeatureFlagHistory<T extends Prisma.FeatureFlagHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagHistoryDeleteArgs>
  ): Promise<FeatureFlagHistory> {
    return this.prisma.featureFlagHistory.delete(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.featureFlagHistory
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getFlagValue(parentId: string): Promise<FeatureFlagValue | null> {
    return this.prisma.featureFlagHistory
      .findUnique({
        where: { id: parentId },
      })
      .flagValue();
  }
}
