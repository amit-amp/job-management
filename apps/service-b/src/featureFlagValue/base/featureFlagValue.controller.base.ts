/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FeatureFlagValueService } from "../featureFlagValue.service";
import { FeatureFlagValueCreateInput } from "./FeatureFlagValueCreateInput";
import { FeatureFlagValue } from "./FeatureFlagValue";
import { FeatureFlagValueFindManyArgs } from "./FeatureFlagValueFindManyArgs";
import { FeatureFlagValueWhereUniqueInput } from "./FeatureFlagValueWhereUniqueInput";
import { FeatureFlagValueUpdateInput } from "./FeatureFlagValueUpdateInput";
import { FeatureFlagHistoryFindManyArgs } from "../../featureFlagHistory/base/FeatureFlagHistoryFindManyArgs";
import { FeatureFlagHistory } from "../../featureFlagHistory/base/FeatureFlagHistory";
import { FeatureFlagHistoryWhereUniqueInput } from "../../featureFlagHistory/base/FeatureFlagHistoryWhereUniqueInput";

export class FeatureFlagValueControllerBase {
  constructor(protected readonly service: FeatureFlagValueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FeatureFlagValue })
  async createFeatureFlagValue(
    @common.Body() data: FeatureFlagValueCreateInput
  ): Promise<FeatureFlagValue> {
    return await this.service.createFeatureFlagValue({
      data: {
        ...data,

        flag: {
          connect: data.flag,
        },
      },
      select: {
        id: true,

        flag: {
          select: {
            id: true,
          },
        },

        value: true,
        environmentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FeatureFlagValue] })
  @ApiNestedQuery(FeatureFlagValueFindManyArgs)
  async featureFlagValues(
    @common.Req() request: Request
  ): Promise<FeatureFlagValue[]> {
    const args = plainToClass(FeatureFlagValueFindManyArgs, request.query);
    return this.service.featureFlagValues({
      ...args,
      select: {
        id: true,

        flag: {
          select: {
            id: true,
          },
        },

        value: true,
        environmentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlagValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async featureFlagValue(
    @common.Param() params: FeatureFlagValueWhereUniqueInput
  ): Promise<FeatureFlagValue | null> {
    const result = await this.service.featureFlagValue({
      where: params,
      select: {
        id: true,

        flag: {
          select: {
            id: true,
          },
        },

        value: true,
        environmentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlagValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFeatureFlagValue(
    @common.Param() params: FeatureFlagValueWhereUniqueInput,
    @common.Body() data: FeatureFlagValueUpdateInput
  ): Promise<FeatureFlagValue | null> {
    try {
      return await this.service.updateFeatureFlagValue({
        where: params,
        data: {
          ...data,

          flag: {
            connect: data.flag,
          },
        },
        select: {
          id: true,

          flag: {
            select: {
              id: true,
            },
          },

          value: true,
          environmentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FeatureFlagValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFeatureFlagValue(
    @common.Param() params: FeatureFlagValueWhereUniqueInput
  ): Promise<FeatureFlagValue | null> {
    try {
      return await this.service.deleteFeatureFlagValue({
        where: params,
        select: {
          id: true,

          flag: {
            select: {
              id: true,
            },
          },

          value: true,
          environmentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/history")
  @ApiNestedQuery(FeatureFlagHistoryFindManyArgs)
  async findHistory(
    @common.Req() request: Request,
    @common.Param() params: FeatureFlagValueWhereUniqueInput
  ): Promise<FeatureFlagHistory[]> {
    const query = plainToClass(FeatureFlagHistoryFindManyArgs, request.query);
    const results = await this.service.findHistory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        oldValue: true,
        newValue: true,

        user: {
          select: {
            id: true,
          },
        },

        flagValue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/history")
  async connectHistory(
    @common.Param() params: FeatureFlagValueWhereUniqueInput,
    @common.Body() body: FeatureFlagHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      history: {
        connect: body,
      },
    };
    await this.service.updateFeatureFlagValue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/history")
  async updateHistory(
    @common.Param() params: FeatureFlagValueWhereUniqueInput,
    @common.Body() body: FeatureFlagHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      history: {
        set: body,
      },
    };
    await this.service.updateFeatureFlagValue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/history")
  async disconnectHistory(
    @common.Param() params: FeatureFlagValueWhereUniqueInput,
    @common.Body() body: FeatureFlagHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      history: {
        disconnect: body,
      },
    };
    await this.service.updateFeatureFlagValue({
      where: params,
      data,
      select: { id: true },
    });
  }
}
