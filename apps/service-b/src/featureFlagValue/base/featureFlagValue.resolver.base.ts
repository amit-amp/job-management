/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FeatureFlagValue } from "./FeatureFlagValue";
import { FeatureFlagValueCountArgs } from "./FeatureFlagValueCountArgs";
import { FeatureFlagValueFindManyArgs } from "./FeatureFlagValueFindManyArgs";
import { FeatureFlagValueFindUniqueArgs } from "./FeatureFlagValueFindUniqueArgs";
import { CreateFeatureFlagValueArgs } from "./CreateFeatureFlagValueArgs";
import { UpdateFeatureFlagValueArgs } from "./UpdateFeatureFlagValueArgs";
import { DeleteFeatureFlagValueArgs } from "./DeleteFeatureFlagValueArgs";
import { FeatureFlagHistoryFindManyArgs } from "../../featureFlagHistory/base/FeatureFlagHistoryFindManyArgs";
import { FeatureFlagHistory } from "../../featureFlagHistory/base/FeatureFlagHistory";
import { FeatureFlag } from "../../featureFlag/base/FeatureFlag";
import { FeatureFlagValueService } from "../featureFlagValue.service";
@graphql.Resolver(() => FeatureFlagValue)
export class FeatureFlagValueResolverBase {
  constructor(protected readonly service: FeatureFlagValueService) {}

  async _featureFlagValuesMeta(
    @graphql.Args() args: FeatureFlagValueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FeatureFlagValue])
  async featureFlagValues(
    @graphql.Args() args: FeatureFlagValueFindManyArgs
  ): Promise<FeatureFlagValue[]> {
    return this.service.featureFlagValues(args);
  }

  @graphql.Query(() => FeatureFlagValue, { nullable: true })
  async featureFlagValue(
    @graphql.Args() args: FeatureFlagValueFindUniqueArgs
  ): Promise<FeatureFlagValue | null> {
    const result = await this.service.featureFlagValue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FeatureFlagValue)
  async createFeatureFlagValue(
    @graphql.Args() args: CreateFeatureFlagValueArgs
  ): Promise<FeatureFlagValue> {
    return await this.service.createFeatureFlagValue({
      ...args,
      data: {
        ...args.data,

        flag: {
          connect: args.data.flag,
        },
      },
    });
  }

  @graphql.Mutation(() => FeatureFlagValue)
  async updateFeatureFlagValue(
    @graphql.Args() args: UpdateFeatureFlagValueArgs
  ): Promise<FeatureFlagValue | null> {
    try {
      return await this.service.updateFeatureFlagValue({
        ...args,
        data: {
          ...args.data,

          flag: {
            connect: args.data.flag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeatureFlagValue)
  async deleteFeatureFlagValue(
    @graphql.Args() args: DeleteFeatureFlagValueArgs
  ): Promise<FeatureFlagValue | null> {
    try {
      return await this.service.deleteFeatureFlagValue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FeatureFlagHistory], { name: "history" })
  async findHistory(
    @graphql.Parent() parent: FeatureFlagValue,
    @graphql.Args() args: FeatureFlagHistoryFindManyArgs
  ): Promise<FeatureFlagHistory[]> {
    const results = await this.service.findHistory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => FeatureFlag, {
    nullable: true,
    name: "flag",
  })
  async getFlag(
    @graphql.Parent() parent: FeatureFlagValue
  ): Promise<FeatureFlag | null> {
    const result = await this.service.getFlag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
