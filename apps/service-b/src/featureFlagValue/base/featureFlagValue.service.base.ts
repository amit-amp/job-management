/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FeatureFlagValue,
  FeatureFlagHistory,
  FeatureFlag,
} from "@prisma/client";

export class FeatureFlagValueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FeatureFlagValueCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagValueCountArgs>
  ): Promise<number> {
    return this.prisma.featureFlagValue.count(args);
  }

  async featureFlagValues<T extends Prisma.FeatureFlagValueFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagValueFindManyArgs>
  ): Promise<FeatureFlagValue[]> {
    return this.prisma.featureFlagValue.findMany(args);
  }
  async featureFlagValue<T extends Prisma.FeatureFlagValueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagValueFindUniqueArgs>
  ): Promise<FeatureFlagValue | null> {
    return this.prisma.featureFlagValue.findUnique(args);
  }
  async createFeatureFlagValue<T extends Prisma.FeatureFlagValueCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagValueCreateArgs>
  ): Promise<FeatureFlagValue> {
    return this.prisma.featureFlagValue.create<T>(args);
  }
  async updateFeatureFlagValue<T extends Prisma.FeatureFlagValueUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagValueUpdateArgs>
  ): Promise<FeatureFlagValue> {
    return this.prisma.featureFlagValue.update<T>(args);
  }
  async deleteFeatureFlagValue<T extends Prisma.FeatureFlagValueDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeatureFlagValueDeleteArgs>
  ): Promise<FeatureFlagValue> {
    return this.prisma.featureFlagValue.delete(args);
  }

  async findHistory(
    parentId: string,
    args: Prisma.FeatureFlagHistoryFindManyArgs
  ): Promise<FeatureFlagHistory[]> {
    return this.prisma.featureFlagValue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .history(args);
  }

  async getFlag(parentId: string): Promise<FeatureFlag | null> {
    return this.prisma.featureFlagValue
      .findUnique({
        where: { id: parentId },
      })
      .flag();
  }
}
