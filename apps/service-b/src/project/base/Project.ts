/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsDate, IsOptional, ValidateNested } from "class-validator";
import { Type } from "class-transformer";
import { ProjectUser } from "../../projectUser/base/ProjectUser";
import { ProjectInvite } from "../../projectInvite/base/ProjectInvite";
import { Test } from "../../test/base/Test";
import { FeatureFlag } from "../../featureFlag/base/FeatureFlag";
import { ApiRequest } from "../../apiRequest/base/ApiRequest";

@ObjectType()
class Project {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  stripeCustomerId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  stripeSubscriptionId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  stripePriceId!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  currentPeriodEnd!: Date;

  @ApiProperty({
    required: false,
    type: () => [ProjectUser],
  })
  @ValidateNested()
  @Type(() => ProjectUser)
  @IsOptional()
  users?: Array<ProjectUser>;

  @ApiProperty({
    required: false,
    type: () => [ProjectInvite],
  })
  @ValidateNested()
  @Type(() => ProjectInvite)
  @IsOptional()
  invites?: Array<ProjectInvite>;

  @ApiProperty({
    required: false,
    type: () => [Test],
  })
  @ValidateNested()
  @Type(() => Test)
  @IsOptional()
  tests?: Array<Test>;

  @ApiProperty({
    required: false,
    type: () => [FeatureFlag],
  })
  @ValidateNested()
  @Type(() => FeatureFlag)
  @IsOptional()
  featureFlags?: Array<FeatureFlag>;

  @ApiProperty({
    required: false,
    type: () => [ApiRequest],
  })
  @ValidateNested()
  @Type(() => ApiRequest)
  @IsOptional()
  apiRequests?: Array<ApiRequest>;
}

export { Project as Project };
