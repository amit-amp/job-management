/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ProjectUserListRelationFilter } from "../../projectUser/base/ProjectUserListRelationFilter";
import { ProjectInviteListRelationFilter } from "../../projectInvite/base/ProjectInviteListRelationFilter";
import { TestListRelationFilter } from "../../test/base/TestListRelationFilter";
import { FeatureFlagListRelationFilter } from "../../featureFlag/base/FeatureFlagListRelationFilter";
import { ApiRequestListRelationFilter } from "../../apiRequest/base/ApiRequestListRelationFilter";

@InputType()
class ProjectWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  stripeCustomerId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  stripeSubscriptionId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  stripePriceId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  currentPeriodEnd?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: () => ProjectUserListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProjectUserListRelationFilter)
  @IsOptional()
  @Field(() => ProjectUserListRelationFilter, {
    nullable: true,
  })
  users?: ProjectUserListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProjectInviteListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProjectInviteListRelationFilter)
  @IsOptional()
  @Field(() => ProjectInviteListRelationFilter, {
    nullable: true,
  })
  invites?: ProjectInviteListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TestListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TestListRelationFilter)
  @IsOptional()
  @Field(() => TestListRelationFilter, {
    nullable: true,
  })
  tests?: TestListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FeatureFlagListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FeatureFlagListRelationFilter)
  @IsOptional()
  @Field(() => FeatureFlagListRelationFilter, {
    nullable: true,
  })
  featureFlags?: FeatureFlagListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ApiRequestListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ApiRequestListRelationFilter)
  @IsOptional()
  @Field(() => ApiRequestListRelationFilter, {
    nullable: true,
  })
  apiRequests?: ApiRequestListRelationFilter;
}

export { ProjectWhereInput as ProjectWhereInput };
