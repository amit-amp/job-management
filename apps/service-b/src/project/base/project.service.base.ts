/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Project,
  ProjectUser,
  ProjectInvite,
  Test,
  FeatureFlag,
  ApiRequest,
} from "@prisma/client";

export class ProjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ProjectCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectCountArgs>
  ): Promise<number> {
    return this.prisma.project.count(args);
  }

  async projects<T extends Prisma.ProjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectFindManyArgs>
  ): Promise<Project[]> {
    return this.prisma.project.findMany(args);
  }
  async project<T extends Prisma.ProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectFindUniqueArgs>
  ): Promise<Project | null> {
    return this.prisma.project.findUnique(args);
  }
  async createProject<T extends Prisma.ProjectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectCreateArgs>
  ): Promise<Project> {
    return this.prisma.project.create<T>(args);
  }
  async updateProject<T extends Prisma.ProjectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUpdateArgs>
  ): Promise<Project> {
    return this.prisma.project.update<T>(args);
  }
  async deleteProject<T extends Prisma.ProjectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectDeleteArgs>
  ): Promise<Project> {
    return this.prisma.project.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.ProjectUserFindManyArgs
  ): Promise<ProjectUser[]> {
    return this.prisma.project
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async findInvites(
    parentId: string,
    args: Prisma.ProjectInviteFindManyArgs
  ): Promise<ProjectInvite[]> {
    return this.prisma.project
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invites(args);
  }

  async findTests(
    parentId: string,
    args: Prisma.TestFindManyArgs
  ): Promise<Test[]> {
    return this.prisma.project
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tests(args);
  }

  async findFeatureFlags(
    parentId: string,
    args: Prisma.FeatureFlagFindManyArgs
  ): Promise<FeatureFlag[]> {
    return this.prisma.project
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .featureFlags(args);
  }

  async findApiRequests(
    parentId: string,
    args: Prisma.ApiRequestFindManyArgs
  ): Promise<ApiRequest[]> {
    return this.prisma.project
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apiRequests(args);
  }
}
