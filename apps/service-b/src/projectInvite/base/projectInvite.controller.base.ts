/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectInviteService } from "../projectInvite.service";
import { ProjectInviteCreateInput } from "./ProjectInviteCreateInput";
import { ProjectInvite } from "./ProjectInvite";
import { ProjectInviteFindManyArgs } from "./ProjectInviteFindManyArgs";
import { ProjectInviteWhereUniqueInput } from "./ProjectInviteWhereUniqueInput";
import { ProjectInviteUpdateInput } from "./ProjectInviteUpdateInput";

export class ProjectInviteControllerBase {
  constructor(protected readonly service: ProjectInviteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectInvite })
  async createProjectInvite(
    @common.Body() data: ProjectInviteCreateInput
  ): Promise<ProjectInvite> {
    return await this.service.createProjectInvite({
      data: {
        ...data,

        project: {
          connect: data.project,
        },

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,

        project: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        usedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectInvite] })
  @ApiNestedQuery(ProjectInviteFindManyArgs)
  async projectInvites(
    @common.Req() request: Request
  ): Promise<ProjectInvite[]> {
    const args = plainToClass(ProjectInviteFindManyArgs, request.query);
    return this.service.projectInvites({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,

        project: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        usedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectInvite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectInvite(
    @common.Param() params: ProjectInviteWhereUniqueInput
  ): Promise<ProjectInvite | null> {
    const result = await this.service.projectInvite({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,

        project: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        usedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectInvite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectInvite(
    @common.Param() params: ProjectInviteWhereUniqueInput,
    @common.Body() data: ProjectInviteUpdateInput
  ): Promise<ProjectInvite | null> {
    try {
      return await this.service.updateProjectInvite({
        where: params,
        data: {
          ...data,

          project: {
            connect: data.project,
          },

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,

          project: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          usedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectInvite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectInvite(
    @common.Param() params: ProjectInviteWhereUniqueInput
  ): Promise<ProjectInvite | null> {
    try {
      return await this.service.deleteProjectInvite({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,

          project: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          usedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
