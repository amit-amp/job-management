/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProjectInvite, Project, User } from "@prisma/client";

export class ProjectInviteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ProjectInviteCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectInviteCountArgs>
  ): Promise<number> {
    return this.prisma.projectInvite.count(args);
  }

  async projectInvites<T extends Prisma.ProjectInviteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectInviteFindManyArgs>
  ): Promise<ProjectInvite[]> {
    return this.prisma.projectInvite.findMany(args);
  }
  async projectInvite<T extends Prisma.ProjectInviteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectInviteFindUniqueArgs>
  ): Promise<ProjectInvite | null> {
    return this.prisma.projectInvite.findUnique(args);
  }
  async createProjectInvite<T extends Prisma.ProjectInviteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectInviteCreateArgs>
  ): Promise<ProjectInvite> {
    return this.prisma.projectInvite.create<T>(args);
  }
  async updateProjectInvite<T extends Prisma.ProjectInviteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectInviteUpdateArgs>
  ): Promise<ProjectInvite> {
    return this.prisma.projectInvite.update<T>(args);
  }
  async deleteProjectInvite<T extends Prisma.ProjectInviteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectInviteDeleteArgs>
  ): Promise<ProjectInvite> {
    return this.prisma.projectInvite.delete(args);
  }

  async getProject(parentId: string): Promise<Project | null> {
    return this.prisma.projectInvite
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.projectInvite
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
