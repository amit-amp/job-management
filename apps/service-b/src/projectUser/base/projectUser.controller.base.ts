/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectUserService } from "../projectUser.service";
import { ProjectUserCreateInput } from "./ProjectUserCreateInput";
import { ProjectUser } from "./ProjectUser";
import { ProjectUserFindManyArgs } from "./ProjectUserFindManyArgs";
import { ProjectUserWhereUniqueInput } from "./ProjectUserWhereUniqueInput";
import { ProjectUserUpdateInput } from "./ProjectUserUpdateInput";

export class ProjectUserControllerBase {
  constructor(protected readonly service: ProjectUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectUser })
  async createProjectUser(
    @common.Body() data: ProjectUserCreateInput
  ): Promise<ProjectUser> {
    return await this.service.createProjectUser({
      data: {
        ...data,

        user: {
          connect: data.user,
        },

        project: {
          connect: data.project,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        role: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectUser] })
  @ApiNestedQuery(ProjectUserFindManyArgs)
  async projectUsers(@common.Req() request: Request): Promise<ProjectUser[]> {
    const args = plainToClass(ProjectUserFindManyArgs, request.query);
    return this.service.projectUsers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        role: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectUser(
    @common.Param() params: ProjectUserWhereUniqueInput
  ): Promise<ProjectUser | null> {
    const result = await this.service.projectUser({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        role: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectUser(
    @common.Param() params: ProjectUserWhereUniqueInput,
    @common.Body() data: ProjectUserUpdateInput
  ): Promise<ProjectUser | null> {
    try {
      return await this.service.updateProjectUser({
        where: params,
        data: {
          ...data,

          user: {
            connect: data.user,
          },

          project: {
            connect: data.project,
          },
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },

          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectUser(
    @common.Param() params: ProjectUserWhereUniqueInput
  ): Promise<ProjectUser | null> {
    try {
      return await this.service.deleteProjectUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          project: {
            select: {
              id: true,
            },
          },

          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
