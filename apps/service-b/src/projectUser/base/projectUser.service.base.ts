/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProjectUser, User, Project } from "@prisma/client";

export class ProjectUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ProjectUserCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUserCountArgs>
  ): Promise<number> {
    return this.prisma.projectUser.count(args);
  }

  async projectUsers<T extends Prisma.ProjectUserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUserFindManyArgs>
  ): Promise<ProjectUser[]> {
    return this.prisma.projectUser.findMany(args);
  }
  async projectUser<T extends Prisma.ProjectUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUserFindUniqueArgs>
  ): Promise<ProjectUser | null> {
    return this.prisma.projectUser.findUnique(args);
  }
  async createProjectUser<T extends Prisma.ProjectUserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUserCreateArgs>
  ): Promise<ProjectUser> {
    return this.prisma.projectUser.create<T>(args);
  }
  async updateProjectUser<T extends Prisma.ProjectUserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUserUpdateArgs>
  ): Promise<ProjectUser> {
    return this.prisma.projectUser.update<T>(args);
  }
  async deleteProjectUser<T extends Prisma.ProjectUserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectUserDeleteArgs>
  ): Promise<ProjectUser> {
    return this.prisma.projectUser.delete(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.projectUser
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getProject(parentId: string): Promise<Project | null> {
    return this.prisma.projectUser
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
