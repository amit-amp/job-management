/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestService } from "../test.service";
import { TestCreateInput } from "./TestCreateInput";
import { Test } from "./Test";
import { TestFindManyArgs } from "./TestFindManyArgs";
import { TestWhereUniqueInput } from "./TestWhereUniqueInput";
import { TestUpdateInput } from "./TestUpdateInput";
import { OptionFindManyArgs } from "../../option/base/OptionFindManyArgs";
import { Option } from "../../option/base/Option";
import { OptionWhereUniqueInput } from "../../option/base/OptionWhereUniqueInput";
import { EventFindManyArgs } from "../../event/base/EventFindManyArgs";
import { Event } from "../../event/base/Event";
import { EventWhereUniqueInput } from "../../event/base/EventWhereUniqueInput";

export class TestControllerBase {
  constructor(protected readonly service: TestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Test })
  async createTest(@common.Body() data: TestCreateInput): Promise<Test> {
    return await this.service.createTest({
      data: {
        ...data,

        project: {
          connect: data.project,
        },
      },
      select: {
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Test] })
  @ApiNestedQuery(TestFindManyArgs)
  async tests(@common.Req() request: Request): Promise<Test[]> {
    const args = plainToClass(TestFindManyArgs, request.query);
    return this.service.tests({
      ...args,
      select: {
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Test })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async test(
    @common.Param() params: TestWhereUniqueInput
  ): Promise<Test | null> {
    const result = await this.service.test({
      where: params,
      select: {
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Test })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTest(
    @common.Param() params: TestWhereUniqueInput,
    @common.Body() data: TestUpdateInput
  ): Promise<Test | null> {
    try {
      return await this.service.updateTest({
        where: params,
        data: {
          ...data,

          project: {
            connect: data.project,
          },
        },
        select: {
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Test })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTest(
    @common.Param() params: TestWhereUniqueInput
  ): Promise<Test | null> {
    try {
      return await this.service.deleteTest({
        where: params,
        select: {
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/options")
  @ApiNestedQuery(OptionFindManyArgs)
  async findOptions(
    @common.Req() request: Request,
    @common.Param() params: TestWhereUniqueInput
  ): Promise<Option[]> {
    const query = plainToClass(OptionFindManyArgs, request.query);
    const results = await this.service.findOptions(params.id, {
      ...query,
      select: {
        id: true,
        identifier: true,
        chance: true,

        test: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/options")
  async connectOptions(
    @common.Param() params: TestWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        connect: body,
      },
    };
    await this.service.updateTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/options")
  async updateOptions(
    @common.Param() params: TestWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        set: body,
      },
    };
    await this.service.updateTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/options")
  async disconnectOptions(
    @common.Param() params: TestWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        disconnect: body,
      },
    };
    await this.service.updateTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/events")
  @ApiNestedQuery(EventFindManyArgs)
  async findEvents(
    @common.Req() request: Request,
    @common.Param() params: TestWhereUniqueInput
  ): Promise<Event[]> {
    const query = plainToClass(EventFindManyArgs, request.query);
    const results = await this.service.findEvents(params.id, {
      ...query,
      select: {
        id: true,

        test: {
          select: {
            id: true,
          },
        },

        typeField: true,
        selectedVariant: true,
        createdAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/events")
  async connectEvents(
    @common.Param() params: TestWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        connect: body,
      },
    };
    await this.service.updateTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/events")
  async updateEvents(
    @common.Param() params: TestWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        set: body,
      },
    };
    await this.service.updateTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/events")
  async disconnectEvents(
    @common.Param() params: TestWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        disconnect: body,
      },
    };
    await this.service.updateTest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
