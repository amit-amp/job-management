/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Test, Option, Event, Project } from "@prisma/client";

export class TestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TestCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestCountArgs>
  ): Promise<number> {
    return this.prisma.test.count(args);
  }

  async tests<T extends Prisma.TestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestFindManyArgs>
  ): Promise<Test[]> {
    return this.prisma.test.findMany(args);
  }
  async test<T extends Prisma.TestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestFindUniqueArgs>
  ): Promise<Test | null> {
    return this.prisma.test.findUnique(args);
  }
  async createTest<T extends Prisma.TestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestCreateArgs>
  ): Promise<Test> {
    return this.prisma.test.create<T>(args);
  }
  async updateTest<T extends Prisma.TestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestUpdateArgs>
  ): Promise<Test> {
    return this.prisma.test.update<T>(args);
  }
  async deleteTest<T extends Prisma.TestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestDeleteArgs>
  ): Promise<Test> {
    return this.prisma.test.delete(args);
  }

  async findOptions(
    parentId: string,
    args: Prisma.OptionFindManyArgs
  ): Promise<Option[]> {
    return this.prisma.test
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .options(args);
  }

  async findEvents(
    parentId: string,
    args: Prisma.EventFindManyArgs
  ): Promise<Event[]> {
    return this.prisma.test
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .events(args);
  }

  async getProject(parentId: string): Promise<Project | null> {
    return this.prisma.test
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
