/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  IsBoolean,
  IsInt,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { ProjectUser } from "../../projectUser/base/ProjectUser";
import { ProjectInvite } from "../../projectInvite/base/ProjectInvite";
import { FeatureFlagHistory } from "../../featureFlagHistory/base/FeatureFlagHistory";
import { CouponCode } from "../../couponCode/base/CouponCode";
import { ApiKey } from "../../apiKey/base/ApiKey";

@ObjectType()
class User {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  emailVerified!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  image!: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hasCompletedOnboarding!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profession!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  technologies!: JsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  experienceLevelFlags!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  experienceLevelTests!: number | null;

  @ApiProperty({
    required: false,
    type: () => [ProjectUser],
  })
  @ValidateNested()
  @Type(() => ProjectUser)
  @IsOptional()
  projects?: Array<ProjectUser>;

  @ApiProperty({
    required: false,
    type: () => [ProjectInvite],
  })
  @ValidateNested()
  @Type(() => ProjectInvite)
  @IsOptional()
  invites?: Array<ProjectInvite>;

  @ApiProperty({
    required: false,
    type: () => [FeatureFlagHistory],
  })
  @ValidateNested()
  @Type(() => FeatureFlagHistory)
  @IsOptional()
  featureFlagHistory?: Array<FeatureFlagHistory>;

  @ApiProperty({
    required: false,
    type: () => [CouponCode],
  })
  @ValidateNested()
  @Type(() => CouponCode)
  @IsOptional()
  couponCodes?: Array<CouponCode>;

  @ApiProperty({
    required: false,
    type: () => [ApiKey],
  })
  @ValidateNested()
  @Type(() => ApiKey)
  @IsOptional()
  apiKeys?: Array<ApiKey>;
}

export { User as User };
