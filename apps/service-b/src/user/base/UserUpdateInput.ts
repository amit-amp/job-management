/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  IsBoolean,
  IsInt,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ProjectUserUpdateManyWithoutUsersInput } from "./ProjectUserUpdateManyWithoutUsersInput";
import { ProjectInviteUpdateManyWithoutUsersInput } from "./ProjectInviteUpdateManyWithoutUsersInput";
import { FeatureFlagHistoryUpdateManyWithoutUsersInput } from "./FeatureFlagHistoryUpdateManyWithoutUsersInput";
import { CouponCodeUpdateManyWithoutUsersInput } from "./CouponCodeUpdateManyWithoutUsersInput";
import { ApiKeyUpdateManyWithoutUsersInput } from "./ApiKeyUpdateManyWithoutUsersInput";

@InputType()
class UserUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  emailVerified?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  image?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  hasCompletedOnboarding?: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profession?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  technologies?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  experienceLevelFlags?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  experienceLevelTests?: number | null;

  @ApiProperty({
    required: false,
    type: () => ProjectUserUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ProjectUserUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ProjectUserUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  projects?: ProjectUserUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ProjectInviteUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ProjectInviteUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ProjectInviteUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  invites?: ProjectInviteUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => FeatureFlagHistoryUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => FeatureFlagHistoryUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => FeatureFlagHistoryUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  featureFlagHistory?: FeatureFlagHistoryUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => CouponCodeUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => CouponCodeUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => CouponCodeUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  couponCodes?: CouponCodeUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ApiKeyUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ApiKeyUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ApiKeyUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  apiKeys?: ApiKeyUpdateManyWithoutUsersInput;
}

export { UserUpdateInput as UserUpdateInput };
