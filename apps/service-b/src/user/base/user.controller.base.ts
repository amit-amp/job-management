/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { ProjectUserFindManyArgs } from "../../projectUser/base/ProjectUserFindManyArgs";
import { ProjectUser } from "../../projectUser/base/ProjectUser";
import { ProjectUserWhereUniqueInput } from "../../projectUser/base/ProjectUserWhereUniqueInput";
import { ProjectInviteFindManyArgs } from "../../projectInvite/base/ProjectInviteFindManyArgs";
import { ProjectInvite } from "../../projectInvite/base/ProjectInvite";
import { ProjectInviteWhereUniqueInput } from "../../projectInvite/base/ProjectInviteWhereUniqueInput";
import { FeatureFlagHistoryFindManyArgs } from "../../featureFlagHistory/base/FeatureFlagHistoryFindManyArgs";
import { FeatureFlagHistory } from "../../featureFlagHistory/base/FeatureFlagHistory";
import { FeatureFlagHistoryWhereUniqueInput } from "../../featureFlagHistory/base/FeatureFlagHistoryWhereUniqueInput";
import { CouponCodeFindManyArgs } from "../../couponCode/base/CouponCodeFindManyArgs";
import { CouponCode } from "../../couponCode/base/CouponCode";
import { CouponCodeWhereUniqueInput } from "../../couponCode/base/CouponCodeWhereUniqueInput";
import { ApiKeyFindManyArgs } from "../../apiKey/base/ApiKeyFindManyArgs";
import { ApiKey } from "../../apiKey/base/ApiKey";
import { ApiKeyWhereUniqueInput } from "../../apiKey/base/ApiKeyWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        id: true,
        name: true,
        email: true,
        emailVerified: true,
        image: true,
        hasCompletedOnboarding: true,
        profession: true,
        technologies: true,
        experienceLevelFlags: true,
        experienceLevelTests: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        id: true,
        name: true,
        email: true,
        emailVerified: true,
        image: true,
        hasCompletedOnboarding: true,
        profession: true,
        technologies: true,
        experienceLevelFlags: true,
        experienceLevelTests: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        id: true,
        name: true,
        email: true,
        emailVerified: true,
        image: true,
        hasCompletedOnboarding: true,
        profession: true,
        technologies: true,
        experienceLevelFlags: true,
        experienceLevelTests: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          id: true,
          name: true,
          email: true,
          emailVerified: true,
          image: true,
          hasCompletedOnboarding: true,
          profession: true,
          technologies: true,
          experienceLevelFlags: true,
          experienceLevelTests: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          id: true,
          name: true,
          email: true,
          emailVerified: true,
          image: true,
          hasCompletedOnboarding: true,
          profession: true,
          technologies: true,
          experienceLevelFlags: true,
          experienceLevelTests: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectUserFindManyArgs)
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ProjectUser[]> {
    const query = plainToClass(ProjectUserFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        project: {
          select: {
            id: true,
          },
        },

        role: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  async connectProjects(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  async updateProjects(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  async disconnectProjects(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invites")
  @ApiNestedQuery(ProjectInviteFindManyArgs)
  async findInvites(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ProjectInvite[]> {
    const query = plainToClass(ProjectInviteFindManyArgs, request.query);
    const results = await this.service.findInvites(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,

        project: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        usedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invites")
  async connectInvites(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectInviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invites: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invites")
  async updateInvites(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectInviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invites: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invites")
  async disconnectInvites(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProjectInviteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invites: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/featureFlagHistory")
  @ApiNestedQuery(FeatureFlagHistoryFindManyArgs)
  async findFeatureFlagHistory(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FeatureFlagHistory[]> {
    const query = plainToClass(FeatureFlagHistoryFindManyArgs, request.query);
    const results = await this.service.findFeatureFlagHistory(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        oldValue: true,
        newValue: true,

        user: {
          select: {
            id: true,
          },
        },

        flagValue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/featureFlagHistory")
  async connectFeatureFlagHistory(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FeatureFlagHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featureFlagHistory: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/featureFlagHistory")
  async updateFeatureFlagHistory(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FeatureFlagHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featureFlagHistory: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/featureFlagHistory")
  async disconnectFeatureFlagHistory(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FeatureFlagHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      featureFlagHistory: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/couponCodes")
  @ApiNestedQuery(CouponCodeFindManyArgs)
  async findCouponCodes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<CouponCode[]> {
    const query = plainToClass(CouponCodeFindManyArgs, request.query);
    const results = await this.service.findCouponCodes(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        code: true,
        stripePriceId: true,
        redeemedAt: true,

        redeemedBy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/couponCodes")
  async connectCouponCodes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CouponCodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponCodes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/couponCodes")
  async updateCouponCodes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CouponCodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponCodes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/couponCodes")
  async disconnectCouponCodes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CouponCodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponCodes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/apiKeys")
  @ApiNestedQuery(ApiKeyFindManyArgs)
  async findApiKeys(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ApiKey[]> {
    const query = plainToClass(ApiKeyFindManyArgs, request.query);
    const results = await this.service.findApiKeys(params.id, {
      ...query,
      select: {
        id: true,
        name: true,
        hashedKey: true,
        validUntil: true,
        revokedAt: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apiKeys")
  async connectApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apiKeys")
  async updateApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apiKeys")
  async disconnectApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
