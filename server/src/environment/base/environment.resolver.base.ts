/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Environment } from "./Environment";
import { EnvironmentCountArgs } from "./EnvironmentCountArgs";
import { EnvironmentFindManyArgs } from "./EnvironmentFindManyArgs";
import { EnvironmentFindUniqueArgs } from "./EnvironmentFindUniqueArgs";
import { CreateEnvironmentArgs } from "./CreateEnvironmentArgs";
import { UpdateEnvironmentArgs } from "./UpdateEnvironmentArgs";
import { DeleteEnvironmentArgs } from "./DeleteEnvironmentArgs";
import { EnvironmentService } from "../environment.service";
@graphql.Resolver(() => Environment)
export class EnvironmentResolverBase {
  constructor(protected readonly service: EnvironmentService) {}

  async _environmentsMeta(
    @graphql.Args() args: EnvironmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Environment])
  async environments(
    @graphql.Args() args: EnvironmentFindManyArgs
  ): Promise<Environment[]> {
    return this.service.environments(args);
  }

  @graphql.Query(() => Environment, { nullable: true })
  async environment(
    @graphql.Args() args: EnvironmentFindUniqueArgs
  ): Promise<Environment | null> {
    const result = await this.service.environment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Environment)
  async createEnvironment(
    @graphql.Args() args: CreateEnvironmentArgs
  ): Promise<Environment> {
    return await this.service.createEnvironment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Environment)
  async updateEnvironment(
    @graphql.Args() args: UpdateEnvironmentArgs
  ): Promise<Environment | null> {
    try {
      return await this.service.updateEnvironment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Environment)
  async deleteEnvironment(
    @graphql.Args() args: DeleteEnvironmentArgs
  ): Promise<Environment | null> {
    try {
      return await this.service.deleteEnvironment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
